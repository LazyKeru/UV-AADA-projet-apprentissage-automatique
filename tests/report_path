
    <html>
        <head>
            <title>Classifier and parameter selection Report</title>
        </head>
        <body>
            <h1>Classifier and parameter selection Report</h1>
            
        <h2>Classifier MLPClassifier:</h2>
        
        <p>Classification report for the best MLPClassifier
              precision    recall  f1-score   support

         1.0       0.33      1.00      0.50         1
         2.0       0.25      1.00      0.40         1
         3.0       0.33      1.00      0.50         1
         4.0       0.33      1.00      0.50         1
         5.0       0.60      1.00      0.75         3
         6.0       1.00      0.33      0.50         3
         7.0       1.00      0.50      0.67         2
         8.0       1.00      0.67      0.80         3
         9.0       0.50      0.33      0.40         3
        10.0       1.00      0.25      0.40         4
        11.0       0.33      1.00      0.50         1
        12.0       1.00      1.00      1.00         1
        14.0       0.50      0.50      0.50         2
        15.0       1.00      0.50      0.67         2
        16.0       0.50      1.00      0.67         1
        17.0       0.00      0.00      0.00         2
        18.0       1.00      0.40      0.57         5
        19.0       0.00      0.00      0.00         3
        20.0       0.33      0.50      0.40         2
        21.0       0.00      0.00      0.00         1
        22.0       0.67      1.00      0.80         2
        23.0       0.75      1.00      0.86         3
        24.0       1.00      1.00      1.00         2
        25.0       1.00      1.00      1.00         5

    accuracy                           0.61        54
   macro avg       0.60      0.67      0.56        54
weighted avg       0.70      0.61      0.58        54
</p>
        
        <p>Confusion matrix for the best MLPClassifier classifier
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [2 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]
 [0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 2 0 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]
 [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5]]</p>
        
        <p>cv_results_ for MLPClassifier classifier
{'mean_fit_time': array([1.01121044, 0.98814692, 1.06132035]), 'std_fit_time': array([0.10973385, 0.09355795, 0.06821724]), 'mean_score_time': array([0.00220017, 0.00199647, 0.00219879]), 'std_score_time': array([4.00282014e-04, 7.32593218e-06, 4.01097028e-04]), 'param_hidden_layer_sizes': masked_array(data=[100, 100, 100],
             mask=[False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[600, 800, 1000],
             mask=[False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'hidden_layer_sizes': 100, 'max_iter': 600}, {'hidden_layer_sizes': 100, 'max_iter': 800}, {'hidden_layer_sizes': 100, 'max_iter': 1000}], 'split0_test_score': array([0.60535714, 0.65815018, 0.67454212]), 'split1_test_score': array([0.61804029, 0.60659341, 0.525     ]), 'split2_test_score': array([0.728663  , 0.75128205, 0.7709707 ]), 'split3_test_score': array([0.65430403, 0.67051282, 0.5775641 ]), 'split4_test_score': array([0.70576923, 0.66242369, 0.6025641 ]), 'mean_test_score': array([0.66242674, 0.66979243, 0.63012821]), 'std_test_score': array([0.04808095, 0.04652963, 0.08530405]), 'rank_test_score': array([2, 1, 3])}</p>
        
        <p>best_estimator_ for MLPClassifier classifier
MLPClassifier(hidden_layer_sizes=100, max_iter=800)</p>
        
        <p>best_params_ for MLPClassifier classifier
{'hidden_layer_sizes': 100, 'max_iter': 800}</p>
        
        <p>best_score_ for MLPClassifier classifier
0.6697924297924297</p>
        
        <h2>Classifier SVC:</h2>
        
        <p>Classification report for the best SVC
              precision    recall  f1-score   support

         1.0       0.33      1.00      0.50         1
         2.0       0.50      1.00      0.67         1
         3.0       0.25      1.00      0.40         1
         4.0       0.00      0.00      0.00         1
         5.0       0.00      0.00      0.00         3
         6.0       0.00      0.00      0.00         3
         7.0       0.00      0.00      0.00         2
         8.0       0.50      1.00      0.67         3
         9.0       0.50      0.33      0.40         3
        10.0       0.00      0.00      0.00         4
        11.0       0.00      0.00      0.00         1
        12.0       0.50      1.00      0.67         1
        13.0       0.00      0.00      0.00         0
        14.0       1.00      0.50      0.67         2
        15.0       1.00      1.00      1.00         2
        16.0       1.00      1.00      1.00         1
        17.0       0.00      0.00      0.00         2
        18.0       1.00      0.40      0.57         5
        19.0       0.00      0.00      0.00         3
        20.0       0.50      0.50      0.50         2
        21.0       0.00      0.00      0.00         1
        22.0       0.67      1.00      0.80         2
        23.0       0.67      0.67      0.67         3
        24.0       1.00      1.00      1.00         2
        25.0       0.00      0.00      0.00         5
        26.0       0.00      0.00      0.00         0

    accuracy                           0.39        54
   macro avg       0.36      0.44      0.37        54
weighted avg       0.39      0.39      0.36        54
</p>
        
        <p>Confusion matrix for the best SVC classifier
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 2 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
 [0 0 1 2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]
 [1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0]
 [0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]
 [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]</p>
        
        <p>cv_results_ for SVC classifier
{'mean_fit_time': array([0.01099687, 0.00999556, 0.00979695, 0.00939417]), 'std_fit_time': array([3.20369282e-06, 4.48480494e-06, 4.00001313e-04, 4.92851215e-04]), 'mean_score_time': array([0.0050046 , 0.00480175, 0.00480294, 0.00440097]), 'std_score_time': array([4.09469594e-06, 4.01020532e-04, 4.00787773e-04, 4.90271667e-04]), 'param_C': masked_array(data=[0.5, 1.0, 1.5, 2.0],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'C': 0.5}, {'C': 1.0}, {'C': 1.5}, {'C': 2.0}], 'split0_test_score': array([0.20862215, 0.41410811, 0.48207626, 0.51035215]), 'split1_test_score': array([0.29917582, 0.37905983, 0.45832501, 0.52211538]), 'split2_test_score': array([0.30931392, 0.39502997, 0.49304584, 0.60360195]), 'split3_test_score': array([0.21685014, 0.40358808, 0.4547952 , 0.54880952]), 'split4_test_score': array([0.2557196 , 0.35889805, 0.43311966, 0.48745421]), 'mean_test_score': array([0.25793633, 0.39013681, 0.46427239, 0.53446664]), 'std_test_score': array([0.04114664, 0.01938073, 0.02116871, 0.03982371]), 'rank_test_score': array([4, 3, 2, 1])}</p>
        
        <p>best_estimator_ for SVC classifier
SVC(C=2.0)</p>
        
        <p>best_params_ for SVC classifier
{'C': 2.0}</p>
        
        <p>best_score_ for SVC classifier
0.5344666444666445</p>
        
        </body>
    </html>
    